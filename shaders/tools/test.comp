#version 460 core

//#import shaders/consts.glsl
//#import shaders/tools/brdf_db.glsl

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 1) uniform writeonly image2D resultsTest;

void main()
{
    const int size = 64;
    const int n = 8;
    for (int i = 0; i < n; i++) {
        float theta_in = i * 0.5 * PI / n;

        for (int j = 0; j < n; j++) {
            float phi_in = j * 2.0 * PI / (n);

            for (int k = 0; k < n; k++) {
                float theta_out = k * 0.5 * PI / n;

                for (int l = 0; l < n; l++) {
                    float phi_out = l * 2.0 * PI / (n);
                    float red, green, blue;

                    vec3 color = lookup_brdf(brdf, theta_in, phi_in, theta_out, phi_out);
                    color = color / (color + 1.0);

                    vec4 outCol = vec4(color, 1.0);

                    int pos = i + j + k + l;
                    int y = size;

                    while
                        pos > size - 1
                        {
                            pos -= size;
                            y--;
                        }

                    imageStore(resultsTest, ivec2(pos, y), outCol);
                }
            }
        }
    }
}
